server:
  port: 9071
  servlet:
    context-path: /${AUTH_CONTEXT_PATH}

spring:
  security:
    oauth2:
      client:
        registration:
          azure:
            client-id: ${OAUTH2_AZURE_CLIENT_ID}
            client-secret: ${OAUTH2_AZURE_CLIENT_SECRET}
            client-name: ${OAUTH2_AZURE_CLIENT_NAME}
            redirect-uri: ${OAUTH2_AZURE_CLIENT_REDIRECT_URI}
            scope: ${OAUTH2_AZURE_CLIENT_SCOPE}
        provider:
          azure:
            authorization-uri: ${OAUTH2_AZURE_CLIENT_AUTHORIZATION_URI}
            token-uri: ${OAUTH2_AZURE_CLIENT_TOKEN_URI}
            jwk-set-uri: ${OAUTH2_AZURE_CLIENT_JWK_SET_URI}
            user-info-uri: ${OAUTH2_AZURE_CLIENT_USER_INFO_URI}
            issuer-uri: ${OAUTH2_AZURE_CLIENT_ISSUER_URI}
            user-name-attribute: ${OAUTH2_AZURE_CLIENT_USER_NAME_ATTRIBUTE}

  datasource:
    url: jdbc:postgresql://${DB_HOST_PORT}/campaign_db?currentSchema=auth_schema
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update

  kafka:
    consumer:
      auto-offset-reset: earliest
      bootstrap-servers: ${KAFKA_CONSUMER_BOOTSTRAP_SERVERS}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        isolation:
        level: read_committed
        spring:
          json:
            trusted:
              packages: "*"
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      enable-auto-commit: 'false'
      group-id: campaign_auth
    producer:
      bootstrap-servers: ${KAFKA_CONSUMER_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    topic:
      email: email_topic
      sms: sms_topic
      user: campaign_user
      inquiry: user_inquiry
      actionCard: actionCard_User
      delete-users: delete_users

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  cloud:
    consul:
      host: ${CONSUL_HOST_NAME}
      port: ${CONSUL_PORT}
      discovery:
        instance-id: ${spring.application.name} + ${random.value}
        healthCheckPath: ${server.servlet.context-path}/actuator/health
        serviceName: ${spring.application.name}

jwt:
  secret: ${AUTH_JWT_SECRET}
  token:
    validity: ${AUTH_JWT_TOKEN_VALIDITY}
  refreshtoken:
    validity: ${AUTH_JWT_REFRESH_TOKEN_VALIDITY}

delete-user-days: ${DELETE_USER_DAYS}

otp:
  validity: ${OTP_VALIDITY}

mail-service: true
otp-service-type: mail

management:
  tracing:
    sampling:
      probability: 1.0

#swagger openapi configuration
openapi:
  service:
    title: campaign-auth DEV server doc
    version: 1.0.0
    url: ${GATEWAY_URL}
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html


# # # eureka:
# # #   instance:
# # #     prefer-ip-address: true
# # #   client:
# # #     fetch-registry: true
# # #     register-with-eureka: true
# # #     service-url:
# # #       defaultZone: http://localhost:8761/eureka

# demo:
#   msg: happy birthday abhishek ffffegggkkkaaabbbcccdddwwwwxxx


# server:
#   port: 8080
#   servlet:
#     context-path: /

# spring:
#   main:
#     web-application-type: reactive
#   datasource:
#     url: jdbc:postgresql://${DB_HOST_PORT}/campaign_db?currentSchema=auth_schema
#     username: ${DB_USERNAME}
#     password: ${DB_PASSWORD}
#   jpa:
#     database-platform: org.hibernate.dialect.PostgreSQLDialect
#     show-sql: true
#     hibernate:
#       ddl-auto: update
#   cloud:
#     gateway:
#       httpclient:
#         connect-timeout: 3000
#         response-timeout: 45s
   
     
#     config:
#         uri: http://localhost:9091
#     consul:
#       host: ${CONSUL_HOST_NAME}
#       port: ${CONSUL_PORT}
#       discovery:
#         instance-id: ${spring.application.name} + ${random.value}
#         healthCheckPath: /actuator/health
#         serviceName: ${spring.application.name}

# jwt:
#   secret: ${AUTH_JWT_SECRET}

# endpoint:
#   whiteListUrls:
#     - /${AUTH_CONTEXT_PATH}/auth/register
#     - /${AUTH_CONTEXT_PATH}/auth/signin
#     - /${AUTH_CONTEXT_PATH}/auth/refresh-token
#     - /${AUTH_CONTEXT_PATH}/auth/totp-verify
#     - /${AUTH_CONTEXT_PATH}/auth/send-otp
#     - /${AUTH_CONTEXT_PATH}/auth/verify-otp
#     - /${AUTH_CONTEXT_PATH}/auth/change-password
#     - /${AUTH_CONTEXT_PATH}/auth/verify-2fa-otp
#     - /${AUTH_CONTEXT_PATH}/has-permission
#     - /${SERVICE_CONTEXT_PATH}/inquiry
#     - /api-docs/**
#     - /v3/api-docs
#     - /swagger-ui/**
#     - /swagger-ui.html
#     - ${ZIPKIN_URL}
#     - /webjars/**
#     - /v3-new

# #management:
# #  tracing:
# #    sampling:
# #      probability: 1.0

# springdoc:
#   enable-native-support: true
#   api-docs:
#     path: /v3/api-docs
#     enabled: true
#   swagger-ui:
#     enabled: true
#     path: /swagger-ui.html
#     config-url: /v3/api-docs/swagger-config
#     urls:
#       - url: /${ACTION_CARDS_CONTEXT_PATH}/v3/api-docs
#         name: action-card service
#         primaryName: action-card service
#       - url: /${ANALYTICS_CONTEXT_PATH}/v3/api-docs
#         name: Analytic service
#         primaryName: Analytic service
#       - url: /v3/api-docs
#         name: API Gateway Service
#         primaryName: API Gateway Service
#       - url: /${AUTH_CONTEXT_PATH}/v3/api-docs
#         name: Auth service
#         primaryName: Auth service
#       - url: /${BATCH_CONTEXT_PATH}/v3/api-docs
#         name: Batch service
#         primaryName: Batch service
#       - url: /${CATEGORIZATION_CONTEXT_PATH}/v3/api-docs
#         name: Categorization service
#         primaryName: Categorization service
#       - url: /${DOCUMENT_CONTEXT_PATH}/v3/api-docs
#         name: Document service
#         primaryName: Document service
#       - url: /${NOTIFICATION_CONTEXT_PATH}/v3/api-docs
#         name: Notification service
#         primaryName: Notification service
#       - url: /${PAYMENT_CONTEXT_PATH}/v3/api-docs
#         name: Payment service
#         primaryName: Campaign service
#       - url: /${SERVICE_CONTEXT_PATH}/v3/api-docs
#         name: Campaign service
#         primaryName: Campaign service
#       - url: /${SURVEY_CONTEXT_PATH}/v3/api-docs
#         name: Survey service
#         primaryName: Survey service

# # server:
# #   port: 9079
# #   servlet:
# #     context-path: /${AUTH_CONTEXT_PATH}

# # demo:
# #   abhi: hello abhi!!!!!!!!

# # spring:
# #   security:
# #     oauth2:
# #       client:
# #         registration:
# #           azure:
# #             client-id: ${OAUTH2_AZURE_CLIENT_ID}
# #             client-secret: ${OAUTH2_AZURE_CLIENT_SECRET}
# #             client-name: ${OAUTH2_AZURE_CLIENT_NAME}
# #             redirect-uri: ${OAUTH2_AZURE_CLIENT_REDIRECT_URI}
# #             scope: ${OAUTH2_AZURE_CLIENT_SCOPE}
# #         provider:
# #           azure:
# #             authorization-uri: ${OAUTH2_AZURE_CLIENT_AUTHORIZATION_URI}
# #             token-uri: ${OAUTH2_AZURE_CLIENT_TOKEN_URI}
# #             jwk-set-uri: ${OAUTH2_AZURE_CLIENT_JWK_SET_URI}
# #             user-info-uri: ${OAUTH2_AZURE_CLIENT_USER_INFO_URI}
# #             issuer-uri: ${OAUTH2_AZURE_CLIENT_ISSUER_URI}
#   #           user-name-attribute: ${OAUTH2_AZURE_CLIENT_USER_NAME_ATTRIBUTE}

#   # datasource:
#   #   url: jdbc:postgresql://${DB_HOST_PORT}/campaign_db?currentSchema=auth_schema
#   #   username: ${DB_USERNAME}
#   #   password: ${DB_PASSWORD}
#   # jpa:
#   #   database-platform: org.hibernate.dialect.PostgreSQLDialect
#   #   show-sql: true
#   #   hibernate:
#   #     ddl-auto: update

#   # kafka:
#   #   consumer:
#   #     auto-offset-reset: earliest
#   #     bootstrap-servers: ${KAFKA_CONSUMER_BOOTSTRAP_SERVERS}
#   #     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#   #     properties:
#   #       isolation:
#   #       level: read_committed
#   #       spring:
#   #         json:
#   #           trusted:
#   #             packages: "*"
#   #     value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#   #     enable-auto-commit: 'false'
#   #     group-id: campaign_auth
#   #   producer:
#   #     bootstrap-servers: ${KAFKA_CONSUMER_BOOTSTRAP_SERVERS}
#   #     key-serializer: org.apache.kafka.common.serialization.StringSerializer
#   #     value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#   #   topic:
#   #     email: email_topic
#   #     sms: sms_topic
#   #     user: campaign_user
#   #     inquiry: user_inquiry
#   #     actionCard: actionCard_User
#   #     delete-users: delete_users

#   # mail:
#   #   host: smtp.gmail.com
#   #   port: 587
#   #   username: ${EMAIL_USERNAME}
#   #   password: ${EMAIL_PASSWORD}
#   #   properties:
#   #     mail:
#   #       smtp:
#   #         auth: true
#   #         starttls:
#   #           enable: true
#   # cloud:
#   #   consul:
#   #     host: ${CONSUL_HOST_NAME}
#   #     port: ${CONSUL_PORT}
#   #     discovery:
#   #       instance-id: ${spring.application.name} + ${random.value}
#   #       healthCheckPath: ${server.servlet.context-path}/actuator/health
# #         serviceName: ${spring.application.name}

# # jwt:
# #   secret: ${AUTH_JWT_SECRET}
# #   token:
# #     validity: ${AUTH_JWT_TOKEN_VALIDITY}
# #   refreshtoken:
# #     validity: ${AUTH_JWT_REFRESH_TOKEN_VALIDITY}

# # delete-user-days: ${DELETE_USER_DAYS}

# # otp:
# #   validity: ${OTP_VALIDITY}

# # mail-service: true
# # otp-service-type: mail

# # management:
# #   tracing:
# #     sampling:
# #       probability: 1.0

# # #swagger openapi configuration
# # openapi:
# #   service:
# #     title: campaign-auth DEV server doc
# #     version: 1.0.0
# #     url: ${GATEWAY_URL}
# # springdoc:
# #   api-docs:
#   #   path: /v3/api-docs
#   # swagger-ui:
#   #   path: /swagger-ui.html
